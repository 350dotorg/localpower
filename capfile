set :application, "rah"
set :user, "ubuntu"
set :deploy_to, "/scripts/dev"

# These things are not used at the moment
set :scm, :git
set :repository, "git@codebasehq-deploy:rah/rah/rah.git"
set :branch, "master"
set :revision, `git ls-remote origin #{branch} | awk 'BEGIN { FS = " " } ; { print $1 }'`.chomp.strip
set :username, `git config codebase.username`.chomp.strip
set :api_key, `git config codebase.apikey`.chomp.strip

role :app, "repowerathome.com"
# role :web, "repowerathome.com"
# role :db, "repowerathome.com", :primary => true

namespace :deploy do    
    task :staging do
        set :deploy_to, "/scripts/staging"
        default
    end
    
    task :prod do
        set :deploy_to, "/scripts/prod"
        default
    end
    
    desc "Meta task that calls update and restart"
    task :default do
        puts "Deploying to #{deploy_to}"
        update
        minify
        staticupload
        syncdb
        restart
        add_deployment_to_codebase
    end
    
    desc "Update Repo"
    task :update, :roles => :app do
        run "cd #{deploy_to}; git pull"
    end
    
    desc "Min JS and CSS files"
    task :minify, :roles => :app do
        `cd static/minify; ./minify.sh`
        run "cd #{deploy_to}/static/minify; ./minify.sh"
    end
    
    desc "Update static bucket"
    task :staticupload, :roles => :app do
        if deploy_to == "/scripts/prod"
            p "Syncing media with prod s3 account"
            `python manage.py sync_media_s3 --gzip --force`
        else
            p "Skipping s3 sync because target is not 'prod'"
        end
    end
    
    desc "Sync DB"
    task :syncdb, :roles => :app do
        run "cd #{deploy_to}; python manage.py syncdb --noinput"
    end
    
    desc "Restart Apache"
    task :restart, :roles => :app do
        sudo "/etc/init.d/apache2 restart"
    end
    
    desc "Tell Codebase about deployment"
    task :add_deployment_to_codebase do
      regex = /git\@(codebasehq-deploy):(.*)\/(.*)\/(.*)\.git/
      unless m = repository.match(regex)
        puts "  * \e[31mYour repository URL does not a match a valid CodebaseHQ Clone URL\e[0m"
      else
        url = "#{m[2]}.codebasehq.com"
        project = m[3]
        repository = m[4]

        puts "  * \e[44;33mAdding Deployment to your CodebaseHQ account\e[0m"
        puts "      -  Account......: #{url}"
        puts "      -  Username.....: #{username}"
        puts "      -  API Key......: #{api_key[0,10]}..."
        puts "      -  Project......: #{project}"
        puts "      -  Repository...: #{repository}"

        servers = roles.values.collect{|r| r.servers}.flatten.collect{|s| s.host}.uniq.join(', ') rescue ''

        puts "      -  Servers......: #{servers}"
        puts "      -  Revision.....: #{revision}"
        puts "      -  Branch.......: #{branch}"
        puts "      -  Environment..: #{deploy_to}"

        xml = []
        xml << "<deployment>"
        xml << "<servers>#{servers}</servers>"
        xml << "<revision>#{revision}</revision>"
        xml << "<environment>#{deploy_to}</environment>"
        xml << "<branch>#{branch}</branch>"
        xml << "</deployment>"

        require 'net/http'
        require 'uri'

        real_url = "http://#{url}/#{project}/#{repository}/deployments"
        puts "      -  URL..........: #{real_url}"

        url = URI.parse(real_url)

        req = Net::HTTP::Post.new(url.path)
        req.basic_auth(username, api_key)
        req.add_field('Content-type', 'application/xml')
        req.add_field('Accept', 'application/xml')
        res = Net::HTTP.new(url.host, url.port).start { |http| http.request(req, xml.join) }
        case res
        when Net::HTTPCreated then puts "  * \e[32mAdded deployment to Codebase\e[0m"
        else 
          puts "  * \e[31mSorry, your deployment was not logged in Codebase - please check your config above.\e[0m"
        end
      end
    end
end