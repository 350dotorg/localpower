from selenium.selenium import selenium
import unittest, time, re

from django.conf import settings
        
class CreateGroups(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, settings.SELENIUM_BROWSER, settings.SELENIUM_URL)
        self.selenium.start()

    def test_create_manage_groups(self):
        sel = self.selenium
        sel.set_speed(200)
        sel.open("/")
        sel.click("link=Sign Up")
        sel.wait_for_page_to_load("30000")
        sel.type("id_first_name", "New")
        sel.type("id_last_name", "User")
        sel.type("id_email", "newuser@example.com")
        sel.type("id_password1", "newuser")
        sel.type("id_password2", "newuser")
        sel.click("//input[@value='Register']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Create a group")
        sel.wait_for_page_to_load("30000")
        sel.type("id_name", "test group number one")
        sel.key_up("id_name", "e")
        sel.type("id_description", "test group number one")
        sel.click("//input[@value='Create Group']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Create a Group")
        sel.wait_for_page_to_load("30000")
        sel.type("id_name", "test group number two")
        sel.key_up("id_name", "o")
        sel.type("id_description", "test group number two")
        sel.click("id_membership_type_1")
        sel.click("//input[@value='Create Group']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Logout")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Login")
        sel.wait_for_page_to_load("30000")
        sel.type("id_email", "test@repowerathome.com")
        sel.type("id_password", "repotest10")
        sel.click("//input[@value='Login']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("//div[@id='major-col']/ol/li[2]/div/a")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        try: self.failUnless(sel.is_text_present("Leave Group\ntest group number one"))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Join this Group")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("You have made a request to join test group number two, a manager should grant or deny your membership shortly."))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=close")
        try: self.failUnless(sel.is_text_present("Your membership status is currently pending."))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Logout")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Login")
        sel.wait_for_page_to_load("30000")
        sel.type("id_email", "newuser@example.com")
        sel.type("id_password", "newuser")
        sel.click("//input[@value='Login']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("link=test group number two")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("Test User would like to join\nApprove or Deny"))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Approve")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("test has been added to the group"))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Logout")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Login")
        sel.wait_for_page_to_load("30000")
        sel.type("id_email", "test@repowerathome.com")
        sel.type("id_password", "repotest10")
        sel.click("//input[@value='Login']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("link=test group number two")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("Leave Group\ntest group number two"))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Logout")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Login")
        sel.wait_for_page_to_load("30000")
        sel.type("id_email", "newuser@example.com")
        sel.type("id_password", "newuser")
        sel.click("//input[@value='Login']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Groups")
        sel.wait_for_page_to_load("30000")
        sel.click("link=test group number one")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Edit Group")
        sel.wait_for_page_to_load("30000")
        sel.type("id_description", "test group number one, making sure we can edit a group after it has already been create.")
        sel.click("change_group")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        try: self.assertEqual("test group number one, making sure we can edit a group after it has already been create.", sel.get_value("id_description"))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=Members")
        sel.click("//form[@id='membership_form']/table/tbody/tr[1]/td[1]/input")
        sel.select("id_role", "label=Regular Member")
        sel.click("change_membership")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("You must leave at least one manager in the group."))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("//form[@id='membership_form']/table/tbody/tr[2]/td[1]/input")
        sel.select("id_role", "label=Manager")
        sel.click("change_membership")
        sel.wait_for_page_to_load("30000")
        try: self.failUnless(sel.is_text_present("test group number one's memberships have been updated."))
        except AssertionError, e: self.verificationErrors.append(str(e))
        sel.click("link=close")
        sel.click("link=Group")
        sel.click("delete_group")
        self.failUnless(re.search(r"^Are you sure you delete[\s\S] This cannot be undone\.$", sel.get_confirmation()))
        sel.click("link=close")
        sel.click("link=test group number two")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Edit Group")
        sel.wait_for_page_to_load("30000")
        sel.click("delete_group")
        self.failUnless(re.search(r"^Are you sure you delete[\s\S] This cannot be undone\.$", sel.get_confirmation()))
        sel.click("link=close")
        sel.click("link=Logout")
        sel.wait_for_page_to_load("30000")
        sel.click("link=close")
        sel.click("link=Login")
        sel.wait_for_page_to_load("30000")
        sel.type("id_email", "eric.buckley@climateprotect.org")
        sel.type("id_password", "m0GBfgvL5lWR3tDj")
        sel.click("//input[@value='Login']")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Admin")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Users")
        sel.wait_for_page_to_load("30000")
        sel.click("link=9e55e80ea942b2727c9d6d0c625ca6")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Delete")
        sel.wait_for_page_to_load("30000")
        sel.click("//input[@value=\"Yes, I'm sure\"]")
        sel.wait_for_page_to_load("30000")
        sel.click("link=Log out")
        sel.wait_for_page_to_load("30000")

    def tearDown(self):
        self.selenium.stop()

if __name__ == "__main__":
    unittest.main()
